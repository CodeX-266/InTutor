import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { ArrowLeft, Clock, Brain, CheckCircle, XCircle } from "lucide-react";
import { useNavigate } from "react-router-dom";

interface Question {
  id: number;
  question: string;
  options: string[];
  correct: number;
  explanation: string;
  category: string;
}

const EcoQuizGame = () => {
  const navigate = useNavigate();
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [score, setScore] = useState(0);
  const [streak, setStreak] = useState(0);
  const [bestStreak, setBestStreak] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [timeLeft, setTimeLeft] = useState(15);
  const [gameStarted, setGameStarted] = useState(false);
  const [showExplanation, setShowExplanation] = useState(false);

  const questions: Question[] = [
    {
      id: 1,
      question: "Which renewable energy source is generated by wind turbines?",
      options: ["Solar Energy", "Wind Energy", "Nuclear Energy", "Coal Energy"],
      correct: 1,
      explanation: "Wind turbines convert wind energy into electrical energy, making it a clean, renewable source!",
      category: "Renewable Energy"
    },
    {
      id: 2,
      question: "What is the main greenhouse gas responsible for climate change?",
      options: ["Oxygen", "Nitrogen", "Carbon Dioxide", "Hydrogen"],
      correct: 2,
      explanation: "Carbon dioxide (CO₂) traps heat in Earth's atmosphere, causing global warming.",
      category: "Climate Change"
    },
    {
      id: 3,
      question: "How long does it take for a plastic bottle to decompose?",
      options: ["1 year", "10 years", "100 years", "450+ years"],
      correct: 3,
      explanation: "Plastic bottles can take 450+ years to decompose, which is why recycling is so important!",
      category: "Recycling"
    },
    {
      id: 4,
      question: "Which of these saves the most water?",
      options: ["Taking shorter showers", "Fixing leaky taps", "Running dishwasher full", "All of the above"],
      correct: 3,
      explanation: "All these actions help conserve water! Every drop counts in protecting our precious water resources.",
      category: "Water Conservation"
    },
    {
      id: 5,
      question: "What percentage of Earth's water is fresh water?",
      options: ["50%", "25%", "10%", "Less than 3%"],
      correct: 3,
      explanation: "Less than 3% of Earth's water is fresh water, making it extremely precious and worth protecting!",
      category: "Water Conservation"
    },
    {
      id: 6,
      question: "Which animal is most affected by plastic pollution in oceans?",
      options: ["Sea turtles", "Whales", "Seabirds", "All of the above"],
      correct: 3,
      explanation: "All marine animals are affected by plastic pollution, which is why we must reduce plastic waste!",
      category: "Biodiversity"
    },
    {
      id: 7,
      question: "How many trees does it take to make 1 ton of paper?",
      options: ["5 trees", "10 trees", "17 trees", "25 trees"],
      correct: 2,
      explanation: "It takes about 17 trees to make 1 ton of paper. Recycling paper saves trees and forests!",
      category: "Recycling"
    },
    {
      id: 8,
      question: "What is the most eco-friendly way to travel short distances?",
      options: ["Car", "Bus", "Walking/Cycling", "Plane"],
      correct: 2,
      explanation: "Walking and cycling produce zero emissions and are great for both you and the planet!",
      category: "Transportation"
    }
  ];

  // Timer effect
  useEffect(() => {
    if (!gameStarted || showResult || showExplanation) return;
    
    if (timeLeft > 0) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else {
      // Time's up!
      handleAnswer(-1); // Wrong answer
    }
  }, [timeLeft, gameStarted, showResult, showExplanation]);

  const handleAnswer = (answerIndex: number) => {
    setSelectedAnswer(answerIndex);
    setShowExplanation(true);
    
    const isCorrect = answerIndex === questions[currentQuestion].correct;
    
    if (isCorrect) {
      setScore(score + 10);
      setStreak(streak + 1);
      setBestStreak(Math.max(bestStreak, streak + 1));
    } else {
      setStreak(0);
    }
  };

  const nextQuestion = () => {
    setShowExplanation(false);
    setSelectedAnswer(null);
    setTimeLeft(15);
    
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      setShowResult(true);
    }
  };

  const startGame = () => {
    setGameStarted(true);
    setCurrentQuestion(0);
    setScore(0);
    setStreak(0);
    setTimeLeft(15);
    setShowResult(false);
    setShowExplanation(false);
    setSelectedAnswer(null);
  };

  const resetGame = () => {
    setGameStarted(false);
    setCurrentQuestion(0);
    setScore(0);
    setStreak(0);
    setBestStreak(0);
    setTimeLeft(15);
    setShowResult(false);
    setShowExplanation(false);
    setSelectedAnswer(null);
  };

  if (!gameStarted) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-400 to-blue-500 flex items-center justify-center p-4">
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          className="bg-white rounded-2xl p-8 text-center max-w-md"
        >
          <div className="text-6xl mb-4">🧠</div>
          <h1 className="text-3xl font-bold mb-4">Eco Quiz Adventure</h1>
          <p className="text-gray-600 mb-6">
            Test your environmental knowledge! Answer questions about climate change, 
            recycling, renewable energy, and biodiversity. You have 15 seconds per question!
          </p>
          <Button onClick={startGame} className="btn-hero">
            🎮 Start Quiz
          </Button>
        </motion.div>
      </div>
    );
  }

  if (showResult) {
    const percentage = Math.round((score / (questions.length * 10)) * 100);
    const earnedBadge = bestStreak >= 5;
    
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-400 to-blue-500 flex items-center justify-center p-4">
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          className="bg-white rounded-2xl p-8 text-center max-w-md"
        >
          <div className="text-6xl mb-4">
            {percentage >= 80 ? "🏆" : percentage >= 60 ? "🌟" : "🌱"}
          </div>
          
          <h2 className="text-3xl font-bold mb-4">Quiz Complete!</h2>
          
          <div className="space-y-4 mb-6">
            <div className="bg-primary/10 rounded-lg p-4">
              <div className="text-2xl font-bold text-primary">{score} points</div>
              <div className="text-sm text-gray-600">{percentage}% correct</div>
            </div>
            
            <div className="bg-secondary/10 rounded-lg p-4">
              <div className="text-xl font-bold text-secondary">Best Streak: {bestStreak}</div>
              <div className="text-sm text-gray-600">questions in a row</div>
            </div>
          </div>

          {earnedBadge && (
            <motion.div
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              className="bg-gradient-to-r from-yellow-400 to-orange-500 text-white p-4 rounded-lg mb-6"
            >
              <div className="text-2xl mb-2">🧠 Eco Genius Badge!</div>
              <div className="text-sm">You got 5 questions right in a row!</div>
            </motion.div>
          )}

          <div className="flex space-x-4">
            <Button onClick={startGame} className="btn-game flex-1">
              🔄 Try Again
            </Button>
            <Button 
              onClick={() => navigate("/dashboard")} 
              variant="outline"
              className="flex-1"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Dashboard
            </Button>
          </div>
        </motion.div>
      </div>
    );
  }

  const question = questions[currentQuestion];
  const progress = ((currentQuestion + 1) / questions.length) * 100;

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-400 to-blue-500 p-4">
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <Button
          variant="outline"
          onClick={() => navigate("/dashboard")}
          className="bg-white/90"
        >
          <ArrowLeft className="w-4 h-4 mr-2" />
          Back
        </Button>
        
        <div className="flex items-center space-x-6 bg-white/90 px-4 py-2 rounded-full">
          <div className="flex items-center space-x-1">
            <Brain className="w-4 h-4 text-purple-600" />
            <span className="font-bold">Score: {score}</span>
          </div>
          <div className="flex items-center space-x-1">
            <span className="font-bold">Streak: {streak}</span>
          </div>
          <div className="flex items-center space-x-1">
            <Clock className="w-4 h-4 text-orange-500" />
            <span className="font-bold text-orange-500">{timeLeft}s</span>
          </div>
        </div>
      </div>

      {/* Progress Bar */}
      <div className="mb-6">
        <div className="flex justify-between text-white mb-2">
          <span>Question {currentQuestion + 1} of {questions.length}</span>
          <span>{question.category}</span>
        </div>
        <div className="w-full bg-white/30 rounded-full h-2">
          <motion.div
            className="bg-white h-2 rounded-full"
            initial={{ width: 0 }}
            animate={{ width: `${progress}%` }}
            transition={{ duration: 0.5 }}
          />
        </div>
      </div>

      {/* Question */}
      <motion.div
        key={currentQuestion}
        initial={{ opacity: 0, x: 50 }}
        animate={{ opacity: 1, x: 0 }}
        className="bg-white rounded-2xl p-8 mb-6"
      >
        <h2 className="text-2xl font-bold mb-6 text-center">
          {question.question}
        </h2>

        <div className="space-y-4">
          {question.options.map((option, index) => (
            <motion.button
              key={index}
              onClick={() => !showExplanation && handleAnswer(index)}
              disabled={showExplanation}
              className={`
                w-full p-4 rounded-xl text-left transition-all duration-300
                ${showExplanation
                  ? index === question.correct
                    ? 'bg-green-100 border-2 border-green-500 text-green-800'
                    : selectedAnswer === index
                    ? 'bg-red-100 border-2 border-red-500 text-red-800'
                    : 'bg-gray-100 text-gray-600'
                  : 'bg-gray-50 hover:bg-primary/10 hover:border-primary border-2 border-transparent'
                }
              `}
              whileHover={!showExplanation ? { scale: 1.02 } : {}}
              whileTap={!showExplanation ? { scale: 0.98 } : {}}
            >
              <div className="flex items-center justify-between">
                <span className="font-medium">{option}</span>
                {showExplanation && (
                  <div>
                    {index === question.correct && (
                      <CheckCircle className="w-6 h-6 text-green-600" />
                    )}
                    {selectedAnswer === index && index !== question.correct && (
                      <XCircle className="w-6 h-6 text-red-600" />
                    )}
                  </div>
                )}
              </div>
            </motion.button>
          ))}
        </div>

        {/* Explanation */}
        <AnimatePresence>
          {showExplanation && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="mt-6 p-4 bg-blue-50 rounded-lg border-l-4 border-blue-500"
            >
              <p className="text-blue-800 mb-4">{question.explanation}</p>
              <Button onClick={nextQuestion} className="btn-game">
                {currentQuestion < questions.length - 1 ? "Next Question →" : "See Results 🏆"}
              </Button>
            </motion.div>
          )}
        </AnimatePresence>
      </motion.div>

      {/* Timer Bar */}
      <div className="fixed bottom-0 left-0 right-0 h-2 bg-black/20">
        <motion.div
          className="h-full bg-gradient-to-r from-green-400 to-red-500"
          initial={{ width: "100%" }}
          animate={{ width: `${(timeLeft / 15) * 100}%` }}
          transition={{ duration: 0.1 }}
        />
      </div>
    </div>
  );
};

export default EcoQuizGame;